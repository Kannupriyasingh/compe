***********************************************************************************************************************************
Given an array of n integers, find subarray whose xor is maximum.
Input Format
First line contains single integer n (1<=n<=1000000).
Next line contains n space separated integers.
Output Format
Print xor of the subarray whose xor of all elements in subarray is maximum over all subarrays.
Constraints
1 <= n <= 1000000
1 <= A[i] <=100000 
Sample Input
4
1 2 3 4
Sample Output
7
************************************************************************************************************************************
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class trieNode{
    public:
    trieNode* left;
    trieNode* right;
};

void insert(trieNode* head, int n)
{
    trieNode* curr = head;
    for(int i = 31; i >= 0; i--)
    {
        int b = (n>>i)&1;
        if(b == 0)
        {
            if(!curr->left)
            {
                curr->left = new trieNode();
            }
            curr = curr->left;
        }
        else
       {
           if(!curr->right)
           {
               curr->right = new trieNode();
           }
           curr = curr->right;
       }
    }
}
int query(trieNode* head, int curr_exor)
{
        trieNode* curr = head;
        int curr_max_xor = 0;
        for(int j = 31; j >= 0; j--)
        {
            int b = (curr_exor>>j)&1;
            if(b == 0)
            {
                if(curr->right)
                {
                    curr_max_xor += pow(2,j);
                    curr = curr->right;
                }
                else
                curr = curr->left;
            }
            else//(b == 1)
            {
                if(curr->left)
                {
                    curr_max_xor += pow(2,j);
                    curr = curr->left;
                }
                else
                curr = curr->right;
            }
       }
    
    return curr_max_xor;
}

int main()
{
    int n;
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++)
    cin >> arr[i];
    
    trieNode* head = new trieNode();
    int Max_xor = INT_MIN, curr_exor = 0;
    for(int i = 0; i < n; i++)
    {
        curr_exor = curr_exor ^ arr[i];
        insert(head,curr_exor);
        
        int temp = query(head, curr_exor);
            Max_xor = max(Max_xor,temp);
    }
    cout << Max_xor << endl;

    return 0;
}
